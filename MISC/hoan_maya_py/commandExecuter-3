# Count all objects under a hierarchy. Useful for counting joints.
# User must select the root of the hierarchy first.

import re
import pymel.core as pm

def mk_count_hierarchy(hierarchy=True, exclude_ends=True):
	
	# optionally exclude the joints with "end" suffix
	exclude_patterns = ("End$", "end$", "End")

	if hierarchy:
		# selects all within hierarchy
		pm.select(hi=True)

	all = pm.selected()
	
	if exclude_ends:
		for obj in all:
			for pattern in exclude_patterns:
				obj_name = obj.name()
				if re.findall(pattern, obj_name):
					print('--Found "{0}" that matched pattern "{1}": "{0}" is excluded.'\
					.format(obj_name, pattern))
					all.remove(obj)
					break
	
	pm.select(all, r=True)
	count = len(all)
	
	print('\n***Total number of objects in hierarchy is: {0}'.format(count))
	return count
	
if __name__ == "__main__":
	mk_count_hierarchy(False)
