# Embedded file name: D:\data\Core\tools\RTTools\spaceSwitchTool\spaceSwitchScripts.py
"""
Created on 27 Aug 2017

@author: Riham Toulan
@copyright: 2017 (c) purplepuppet AB. All Rights Reserved
"""
import maya.cmds as cmds
import logging
logging.basicConfig()
log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
MenuName = 'PP_spaceSwitchMenu'
StampName = 'PP_spaceDriver'

def spaceSwitch_MM():
    print 'marking menu initialized'
    if cmds.popupMenu(MenuName, exists=True):
        cmds.deleteUI(MenuName)
    try:
        cmds.popupMenu(MenuName, mm=1, b=2, ctl=1, p='viewPanes', pmc=_buildMarkingMenu)
    except TypeError as e:
        log.exception(e)


def overrideDagMenuProc():
    cmds.dagObjectHit(menu=MenuName)
    popChildren = cmds.popupMenu(MenuName, query=True, itemArray=True)
    command = cmds.menuItem(popChildren[0], query=True, command=True)
    if not command:
        return
    fullName = command.split(' ')[-1]
    cmds.popupMenu(MenuName, edit=True, deleteAllItems=True)
    return fullName


def _buildMarkingMenu(*args):
    if cmds.popupMenu(MenuName, exists=True):
        cmds.popupMenu(MenuName, edit=True, deleteAllItems=True)
    cmds.setParent(MenuName, menu=True)
    fullObjectName = ''
    if cmds.dagObjectHit():
        fullObjectName = eval('overrideDagMenuProc()')
        if not fullObjectName:
            return
    else:
        fullObjectName = cmds.ls(sl=True)
        if fullObjectName:
            fullObjectName = fullObjectName[0]
        else:
            return
    if not checkStampedNode(fullObjectName):
        return
    objectSpace = checkStampedNode(fullObjectName)
    spaceAttr = objectSpace.split('.')[-1]
    currentspace = cmds.getAttr(objectSpace, asString=True)
    bakeSpaceMenu = cmds.menuItem(l='Bake Space', parent=MenuName, sm=True, to=True)
    startFrame, endFrame = getPlaybackRange()
    allSpaces = cmds.attributeQuery(spaceAttr, node=fullObjectName, le=1)[0]
    if not allSpaces:
        return
    allSpaces = allSpaces.split(':')
    radialPositions = ['N',
     'NE',
     'NW',
     'E',
     'W']
    menuItem = ''
    radialIdx = 0
    for i, space in enumerate(allSpaces):
        spacesCommand = 'spaceSwitchScripts.spaceSwitchMatch("' + fullObjectName + '"' + ',' + '"' + spaceAttr + '"' + ',' + str(i) + ')'
        bakeCommand = 'spaceSwitchScripts.spaceSwitchBake("' + fullObjectName + '"' + ',' + '"' + spaceAttr + '",' + str(i) + ',[' + str(startFrame) + ',' + str(endFrame) + '])'
        if space != currentspace:
            if radialIdx >= 5:
                menuItem = cmds.menuItem(l=space, c=spacesCommand, parent=MenuName, insertAfter=menuItem)
            else:
                cmds.menuItem(l=space, c=spacesCommand, rp=radialPositions[radialIdx], parent=MenuName)
                radialIdx += 1
        cmds.menuItem(l=space, c=bakeCommand, parent=bakeSpaceMenu)


def checkStampedNode(fullObjectName):
    if not cmds.attributeQuery(StampName, node=fullObjectName, exists=True):
        return
    spaceAttr = cmds.listConnections('%s.%s' % (fullObjectName, StampName), p=True)
    if not spaceAttr:
        return
    return spaceAttr[0]


def spaceSwitchMatch(sel, attrName, attrValue):
    keyWhenSwitching = False
    if cmds.keyframe(sel, q=True):
        keyWhenSwitching = True
    if keyWhenSwitching:
        currentTimeFrame = cmds.currentTime(query=True)
        frameBefore = currentTimeFrame - 1
        cmds.setKeyframe(sel, breakdown=0, hierarchy='none', controlPoints=0, shape=False, t=frameBefore)
    tempPosLoc = cmds.spaceLocator(n='temp_%s_LOC' % sel)
    temp01 = cmds.pointConstraint(sel, tempPosLoc[0])
    temp02 = cmds.orientConstraint(sel, tempPosLoc[0])
    cmds.delete(temp01, temp02)
    cmds.setAttr('%s.%s' % (sel, attrName), attrValue)
    tempCons = []
    lockPosAttrs = getLockedAttrs(sel, 'translate')
    lockRotAttrs = getLockedAttrs(sel, 'rotate')
    if lockPosAttrs != 'none':
        if len(lockPosAttrs) < 3:
            temp01 = cmds.pointConstraint(tempPosLoc, sel, skip=lockPosAttrs)[0]
            tempCons.append(temp01)
    else:
        temp01 = cmds.pointConstraint(tempPosLoc, sel)[0]
        tempCons.append(temp01)
    if lockRotAttrs != 'none':
        if len(lockRotAttrs) < 3:
            temp02 = cmds.orientConstraint(tempPosLoc, sel, skip=lockRotAttrs)[0]
            tempCons.append(temp02)
    else:
        temp02 = cmds.orientConstraint(tempPosLoc, sel)[0]
        tempCons.append(temp02)
    if keyWhenSwitching:
        cmds.setKeyframe(sel, breakdown=0, hierarchy='none', controlPoints=0, shape=1)
    if tempCons:
        cmds.delete(tempCons)
    cmds.delete(tempPosLoc)


def spaceSwitchBake(sel, attrName, attrValue, frameRange = []):
    startFrame = int(frameRange[0])
    endFrame = int(frameRange[-1])
    cmds.setKeyframe(sel, breakdown=0, hierarchy='none', controlPoints=0, shape=False, t=startFrame - 1)
    lockPosAttrs = getLockedAttrs(sel, 'translate')
    lockRotAttrs = getLockedAttrs(sel, 'rotate')
    pointConstValid = True
    orientConstValid = True
    if lockPosAttrs != 'none':
        if not len(lockPosAttrs) < 3:
            pointConstValid = False
    if lockRotAttrs != 'none':
        if not len(lockRotAttrs) < 3:
            orientConstValid = False
    cmds.setKeyframe(sel, at=[attrName,
     'rotateX',
     'rotateY',
     'rotateZ',
     'translateX',
     'translateY',
     'translateZ'], t=list(range(startFrame, endFrame + 1)), i=True, respectKeyable=True)
    for frame in range(startFrame, endFrame + 1):
        cmds.currentTime(frame, e=1, update=True)
        tempPosLoc = cmds.spaceLocator(n='temp_%s_LOC' % sel)
        temp01 = cmds.pointConstraint(sel, tempPosLoc[0])
        temp02 = cmds.orientConstraint(sel, tempPosLoc[0])
        cmds.delete(temp01, temp02)
        cmds.setAttr('%s.%s' % (sel, attrName), attrValue)
        tempCons = []
        if pointConstValid:
            temp01 = cmds.pointConstraint(tempPosLoc, sel, skip=lockPosAttrs)[0]
            tempCons.append(temp01)
        if orientConstValid:
            temp02 = cmds.orientConstraint(tempPosLoc, sel, skip=lockRotAttrs)[0]
            tempCons.append(temp02)
        cmds.setKeyframe(sel, breakdown=0, hierarchy='none', controlPoints=0, shape=0)
        if tempCons:
            cmds.delete(tempCons)
        cmds.delete(tempPosLoc)


def getLockedAttrs(node, mode = 'rotate'):
    lockedAttrs = []
    if mode == 'rotate':
        attrs = ['rotateX', 'rotateY', 'rotateZ']
    if mode == 'translate':
        attrs = ['translateX', 'translateY', 'translateZ']
    for attr in attrs:
        if not cmds.getAttr('%s.%s' % (node, attr), settable=True):
            lockedAttrs.append(attr.replace(mode, '').lower())

    if not lockedAttrs:
        return 'none'
    return lockedAttrs


def getTimelineRange():
    timeRange = []
    timeRange.append(cmds.playbackOptions(animationStartTime=True, query=True))
    timeRange.append(cmds.playbackOptions(animationEndTime=True, query=True))
    return timeRange


def getPlaybackRange():
    timeRange = []
    timeRange.append(cmds.playbackOptions(minTime=True, query=True))
    timeRange.append(cmds.playbackOptions(maxTime=True, query=True))
    return timeRange